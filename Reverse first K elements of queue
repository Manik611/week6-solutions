#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int arr[MAX];
    int front;
    int rear;
} Queue;
void initQueue(Queue* q) {
    q->front = 0;
    q->rear = -1;
}

int isEmpty(Queue* q) {
    return q->front > q->rear;
}

void enqueue(Queue* q, int x) {
    q->arr[++q->rear] = x;
}

int dequeue(Queue* q) {
    if (isEmpty(q)) return -1;
    return q->arr[q->front++];
}

int size(Queue* q) {
    return q->rear - q->front + 1;
}
int front(Queue* q) {
    if (isEmpty(q)) return -1;
    return q->arr[q->front];
}
void reverseK(Queue* q, int k) {
    if (k > size(q)) return;

    int stack[MAX];
    int top = -1;

    for (int i = 0; i < k; i++) {
        stack[++top] = dequeue(q);
    }
    while (top >= 0) {
        enqueue(q, stack[top--]);
    }

    int remaining = size(q) - k;
    for (int i = 0; i < remaining; i++) {
        enqueue(q, dequeue(q));
    }
}
int main() {
    Queue q;
    initQueue(&q);

    int arr[] = {1, 2, 3, 4, 5};
    int n = 5;
    int k = 3;

    for (int i = 0; i < n; i++) enqueue(&q, arr[i]);

    reverseK(&q, k);

    while (!isEmpty(&q)) {
        printf("%d ", dequeue(&q));
    }
    printf("\n");

    return 0;
}
