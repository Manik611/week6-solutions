#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int row, col;
} Point;

typedef struct {
    Point points[10000];
    int front, rear;
} Queue;

void initQueue(Queue* q) { q->front = 0; q->rear = -1; }
int isEmpty(Queue* q) { return q->front > q->rear; }
void enqueue(Queue* q, Point p) { q->points[++q->rear] = p; }
Point dequeue(Queue* q) { return q->points[q->front++]; }

int minTimeToRotAll(int mat[][3], int n, int m) {
    Queue q;
    initQueue(&q);
    int fresh = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (mat[i][j] == 2) {
                enqueue(&q, (Point){i, j});
            } else if (mat[i][j] == 1) {
                fresh++;
            }
        }
    }

    int time = 0;
    int dr[] = {-1, 1, 0, 0};
    int dc[] = {0, 0, -1, 1};

    while (!isEmpty(&q)) {
        int size = q.rear - q.front + 1;
        int rotted = 0;
        for (int i = 0; i < size; i++) {
            Point p = dequeue(&q);
            for (int d = 0; d < 4; d++) {
                int nr = p.row + dr[d];
                int nc = p.col + dc[d];
                if (nr >= 0 && nr < n && nc >= 0 && nc < m && mat[nr][nc] == 1) {
                    mat[nr][nc] = 2;
                    enqueue(&q, (Point){nr, nc});
                    fresh--;
                    rotted = 1;
                }
            }
        }
        if (rotted) time++;
    }

    return (fresh == 0) ? time : -1;
}

int main() {
    int mat[3][3] = {{0,1,2}, {0,1,2}, {2,1,1}};
    int n = 3, m = 3;
    int result = minTimeToRotAll(mat, n, m);
    printf("%d\n", result); 
    return 0;
}
