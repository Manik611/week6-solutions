#include <stdio.h>
#include <stdlib.h>

#define MAX 1000

typedef struct {
    int arr[MAX];
    int top;
} Stack;

void initStack(Stack* s) { s->top = -1; }
int isEmptyStack(Stack* s) { return s->top == -1; }
void push(Stack* s, int x) { s->arr[++(s->top)] = x; }
int pop(Stack* s) { return isEmptyStack(s) ? -1 : s->arr[(s->top)--]; }
int peek(Stack* s) { return isEmptyStack(s) ? -1 : s->arr[s->top]; }

typedef struct {
    Stack s1, s2;
} Queue2Stacks;

void initQueue(Queue2Stacks* q) {
    initStack(&(q->s1));
    initStack(&(q->s2));
}

void enqueue(Queue2Stacks* q, int x) {
    push(&(q->s1), x);
}

int dequeue(Queue2Stacks* q) {
    if (isEmptyStack(&(q->s2))) {
        while (!isEmptyStack(&(q->s1))) {
            push(&(q->s2), pop(&(q->s1)));
        }
    }
    return pop(&(q->s2));
}

int front(Queue2Stacks* q) {
    if (isEmptyStack(&(q->s2))) {
        while (!isEmptyStack(&(q->s1))) {
            push(&(q->s2), pop(&(q->s1)));
        }
    }
    return peek(&(q->s2));
}

int main() {
    int n;
    scanf("%d", &n);
    Queue2Stacks q;
    initQueue(&q);

    for (int i = 0; i < n; i++) {
        int type;
        scanf("%d", &type);
        if (type == 1) {
            int x;
            scanf("%d", &x);
            enqueue(&q, x);
        } else if (type == 2) {
            dequeue(&q);
        } else if (type == 3) {
            printf("%d\n", front(&q));
        }
    }

    return 0;
}
