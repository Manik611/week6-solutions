#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

typedef struct Queue {
    Node* front;
    Node* rear;
    int count;
} Queue;
void initQueue(Queue* q) {
    q->front = NULL;
    q->rear = NULL;
    q->count = 0;
}

bool isEmpty(Queue* q) {
    return q->front == NULL;
}

int size(Queue* q) {
    return q->count;
}

void enqueue(Queue* q, int x) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = x;
    newNode->next = NULL;
    
    if (isEmpty(q)) {
        q->front = q->rear = newNode;
    } else {
        q->rear->next = newNode;
        q->rear = newNode;
    }
    q->count++;
}
void dequeue(Queue* q) {
    if (isEmpty(q)) return; 
    
    Node* temp = q->front;
    q->front = q->front->next;
    
    if (q->front == NULL)
        q->rear = NULL;
    
    free(temp);
    q->count--;
}

int getFront(Queue* q) {
    if (isEmpty(q))
        return -1;
    return q->front->data;
}

int main() {
    int queries[][2] = {{1,5}, {1,3}, {1,4}, {3,-1}, {2,-1}, {5,-1}, {4,-1}};
    int q_count = 7;
    
    Queue q;
    initQueue(&q);
    
    for (int i = 0; i < q_count; i++) {
        int type = queries[i][0];
        int val = queries[i][1];
        switch(type) {
            case 1: enqueue(&q, val); break;
            case 2: dequeue(&q); break;
            case 3: printf("%d\n", getFront(&q)); break;
            case 4: printf("%s\n", isEmpty(&q) ? "true" : "false"); break;
            case 5: printf("%d\n", size(&q)); break;
        }
    }
    
    return 0;
}
